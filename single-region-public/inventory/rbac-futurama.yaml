all:
  vars:
    ###### Install CP from tarball
    # installation_method: archive
    # confluent_archive_file_remote: false
    # confluent_archive_file_source: /root/cp-ansible/confluent-7.0.1.tar.gz

    ##### Install confluent CLI from tarball
    # confluent_cli_download_enabled: true
    # confluent_cli_archive_file_remote: false
    # confluent_cli_archive_file_source: /root/cp-ansible/confluent_v1.43.0_linux_amd64.tar.gz

    # Confluent Secrets
    secrets_protection_enabled: true

    ##### SSL Configuration; use provided JKS
    regenerate_ca: false
    ssl_enabled: true
    ssl_provided_keystore_and_truststore: true
    # ssl_custom_certs: true
    # false cause we're using JKS instead of pem

    regenerate_keystore_and_truststore: true

    ssl_keystore_filepath: /home/ubuntu/ssl/{{inventory_hostname}}.keystore.jks
    ssl_keystore_key_password: confluent
    ssl_keystore_store_password: confluent
    ssl_truststore_filepath: /home/ubuntu/ssl/{{inventory_hostname}}.truststore.jks
    ssl_truststore_password: confluent
    ssl_truststore_ca_cert_alias: caroot

    ##### Confluent Cluster Registry
    kafka_broker_cluster_name: production
    kafka_schema_registry_cluster_name: schema_registry

    ##### Which Java package to install (from yum)
    # redhat_java_package_name: java-11-openjdk
    
    ##### Zookeeper Digest
    zookeeper_sasl_protocol: digest
    zookeeper_quorum_authentication_type: digest
    zookeeper_client_authentication_type: digest

    zookeeper_digest_users:
      admin:
        principal: super
        password: super-secret
      kafka_broker:
        principal: brokerbroker
        password: brokerbroker-secret

    # RBAC
    rbac_enabled: true
    sasl_protocol: plain
    
    # This user will be superuser across the cluster; needs to match the LDAP mds_super_user and kafka_broker_ldap_user
    sasl_plain_users:
      admin:
        principal: professor
        password: professor

    # Enable MDS; create an x509 public and private key used to sign bearer tokens; this should be static and permanent
    # https://docs.confluent.io/platform/current/kafka/configure-mds/index.html#create-a-pem-key-pair
    # openssl genrsa -out mds.key 2048
    # openssl rsa -in mds.key -outform PEM -pubout -out mds.pem
    create_mds_certs: false
    token_services_public_pem_file: /home/ubuntu/ssl/mds.pem
    token_services_private_pem_file: /home/ubuntu/ssl/mds.key

    # LDAP user for the cluster as a whole; will have superuser across the cluster (should be a service account); should also match the admin in `sasl_plain_users`
    mds_super_user: professor
    mds_super_user_password: professor

    # LDAP user for brokers to use; should match the above
    kafka_broker_ldap_user: professor
    kafka_broker_ldap_password: professor

    # LDAP user for Schema Registry (should be a service account)
    schema_registry_ldap_user: professor
    schema_registry_ldap_password: professor

    control_center_ldap_user: professor
    control_center_ldap_password: professor

    # kafka_connect_ldap_user: kafka_connect
    # kafka_connect_ldap_password: password

    # ksql_ldap_user: ksql
    # ksql_ldap_password: password

    # kafka_rest_ldap_user: kafka_rest
    # kafka_rest_ldap_password: password

    kafka_broker_metrics_reporter_enabled: false

    ##### Client Listener
    kafka_broker_custom_listeners:
      client:
        name: CLIENT
        port: 9093

    ##### Broker-specific configurations
    kafka_broker_custom_properties:
      ##### Listener: use LDAP (PLAIN)
      # Optional, otherwise will add other users here
      # listener.name.broker.plain.sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required username="professor" password="professor";
      listener.name.broker.plain.sasl.server.callback.handler.class: io.confluent.security.auth.provider.ldap.LdapAuthenticateCallbackHandler
      listener.name.client.plain.sasl.jaas.config: "org.apache.kafka.common.security.plain.PlainLoginModule required;"
      listener.name.client.plain.sasl.server.callback.handler.class: io.confluent.security.auth.provider.ldap.LdapAuthenticateCallbackHandler

      ##### LDAP Configurations
      ldap.java.naming.factory.initial: com.sun.jndi.ldap.LdapCtxFactory
      ldap.com.sun.jndi.ldap.read.timeout: 3000

      ldap.java.naming.provider.url: ldap://LDAP_SERVER:389
      # ldap.java.naming.security.protocol: SSL
      # ldap.ssl.truststore.location: /path/to/truststore.jks
      # ldap.ssl.truststore.password: truststore-secret

      ldap.java.naming.security.principal: CN=admin,DC=planetexpress,DC=com
      ldap.java.naming.security.credentials: GoodNewsEveryone
      
      ldap.java.naming.security.authentication: simple

      # User-based search (looks for 'memberOf' on user)
      ldap.search.mode: USERS

      ldap.user.search.base: ou=people,dc=planetexpress,dc=com
      ldap.user.name.attribute: uid
      # "sub"; default is 1 level below
      ldap.user.search.scope: 2
      ldap.user.object.class: inetOrgPerson
      
      ldap.user.memberof.attribute: memberOf
      ldap.user.memberof.attribute.pattern: cn=(.*),ou=people,dc=planetexpress,dc=com

      # Group-based search (looks for 'member' on group)
      # ldap.search.mode: GROUPS

      # ldap.group.search.base: ou=people,dc=planetexpress,dc=com
      # ldap.group.object.class: Group
      # ldap.group.name.attribute: cn
      # ldap.group.member.attribute: member
      # ldap.group.member.attribute.pattern: cn=(.*),ou=people,dc=planetexpress,dc=com

    ##### Control Center management mode
    control_center_custom_properties:
      confluent.controlcenter.mode.enable: management
      confluent.controlcenter.ui.replicator.monitoring.enable: false
      confluent.controlcenter.ksql.enable: false


